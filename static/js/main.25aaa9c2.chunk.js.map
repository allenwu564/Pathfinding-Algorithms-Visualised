{"version":3,"sources":["components/Node.js","components/Grid.js","components/algos/Algorithms.js","components/HelpModal.js","components/TopBar.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","state","x","y","type","className","this","sm","id","Component","Grid","startMove","endMove","middleDown","leftDown","rightDown","width","window","innerWidth","height","innerHeight","updateWindowDimensions","bind","addEventListener","removeEventListener","setState","resetGrid","walls","document","querySelectorAll","length","weight","seen","path","start","getElementsByClassName","undefined","end","startX","parseInt","startY","startId","toString","endX","endY","endId","getElementById","e","grid","console","log","button","target","prevState","convertToWall","convertToWeight","convertToDefault","convertToStart","convertToEnd","prevStart","newStart","prevEnd","newEnd","node","col","row","checkType","push","debug","map","style","marginLeft","onContextMenu","preventDefault","onMouseLeave","resetMouse","onMouseDown","setMouse","onMouseUp","onMouseOver","hoverMouse","sleep","ms","Promise","resolve","setTimeout","showPath","pred","a","curr","reverse","BFS","found","queue","n","shift","split","adjacent","i","includes","DFS","stack","pop","Dijkstra","defWeight","nodeWeights","distance","defNodes","Number","MAX_VALUE","weightNodes","seenNodes","getShortestNode","child","childNode","temp","currNode","shortest","Astar","open","closed","fDistance","getHDistance","f","smallest","index","indexOf","splice","Math","abs","HelpModal","modalVisible","toggleModal","Modal","show","onHide","centered","size","Header","closeButton","Title","Body","Col","Footer","Button","onClick","variant","TopBar","running","startAlgorithm","toggleRunning","value","Navbar","bg","Brand","href","Toggle","aria-controls","Form","onSubmit","inline","Nav","Item","Group","Control","as","InputGroup","Prepend","Text","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.25aaa9c2.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport { Col } from 'react-grid-system';\r\nimport \"../styles/Node.css\";\r\n\r\nclass Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            x: props.x, \r\n            y: props.y,\r\n            type: props.type,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Col className={this.state.type} sm={0} id={this.state.x + \" \" + this.state.y}>.</Col>\r\n    }\r\n}\r\n\r\nexport default Node;","import React, {Component} from \"react\";\r\nimport { Row } from 'react-grid-system';\r\nimport Node from \"./Node.js\"\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            startMove: false,\r\n            endMove: false,\r\n            middleDown: false,\r\n            leftDown: false,\r\n            rightDown: false,\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n        this.resetGrid()\r\n    }\r\n\r\n    resetGrid() {\r\n        let walls = document.querySelectorAll(\".wall\");\r\n        let x;\r\n        for (x = 0; x < walls.length; x++) {\r\n            walls[x].className = \"default\"\r\n        }\r\n        let weight = document.querySelectorAll(\".weight\");\r\n        for (x = 0; x < weight.length; x++) {\r\n            weight[x].className = \"default\"\r\n        }\r\n        let seen = document.querySelectorAll(\".seen\");\r\n        for (x = 0; x < seen.length; x++) {\r\n            seen[x].className = \"default\"\r\n        }\r\n        let path = document.querySelectorAll(\".path\");\r\n        for (x = 0; x < path.length; x++) {\r\n            path[x].className = \"default\"\r\n        }\r\n        let start = document.getElementsByClassName(\"start\")[0]\r\n        if (start !== undefined) {\r\n            start.className = \"default\"\r\n        }\r\n        let end = document.getElementsByClassName(\"end\")[0]\r\n        if (end !== undefined) {\r\n            end.className = \"default\"\r\n        }\r\n        const startX = parseInt(window.innerWidth/33/3)\r\n        const startY = parseInt(window.innerHeight/31/2)\r\n        const startId = startX.toString() + \" \" + startY.toString()\r\n        const endX = parseInt(window.innerWidth*2/33/3)\r\n        const endY = parseInt(window.innerHeight/31/2)\r\n        const endId = endX.toString() + \" \" + endY.toString()\r\n        let newStart = document.getElementById(startId)\r\n        newStart.className = \"start\"\r\n        let newEnd = document.getElementById(endId)\r\n        newEnd.className = \"end\"\r\n    }\r\n\r\n    resetMouse(e) {\r\n        this.setState({startMove: false,\r\n            endMove: false,\r\n            middleDown: false,\r\n            leftDown: false,\r\n            rightDown: false,\r\n        })\r\n    }\r\n\r\n    setMouse(e) {\r\n        let grid = document.getElementById(\"grid\")\r\n        console.log(grid.className)\r\n        if (grid.className !== \"false\") {\r\n            if (e.button === 0) {\r\n                if (e.target.className === \"start\") {\r\n                    this.setState(prevState => ({startMove: !prevState.startMove}))\r\n                }\r\n                else if (e.target.className === \"end\") {\r\n                    this.setState(prevState => ({endMove: !prevState.endMove}))\r\n                }\r\n                else {\r\n                    this.setState(prevState => ({leftDown: !prevState.leftDown}))\r\n                    this.convertToWall(e.target.id)\r\n                }\r\n            }\r\n            else if (e.button === 1) {\r\n                this.setState(prevState => ({middleDown: !prevState.middleDown}))\r\n                this.convertToWeight(e.target.id)\r\n            }\r\n            else if (e.button === 2) {\r\n                this.setState(prevState => ({rightDown: !prevState.rightDown}))\r\n                this.convertToDefault(e.target.id)\r\n            }\r\n        }\r\n    }\r\n\r\n    hoverMouse(e) {\r\n        let grid = document.getElementById(\"grid\")\r\n        if (grid.className !== \"false\") {\r\n            if (this.state.leftDown) {\r\n                this.convertToWall(e.target.id)\r\n            }\r\n            else if (this.state.rightDown) {\r\n                this.convertToDefault(e.target.id)\r\n            }\r\n            else if (this.state.middleDown) {\r\n                this.convertToWeight(e.target.id)\r\n            }\r\n            else if (this.state.startMove) {\r\n                this.convertToStart(e.target.id)\r\n            }\r\n            else if (this.state.endMove) {\r\n                this.convertToEnd(e.target.id)\r\n            }\r\n        }\r\n    }\r\n\r\n    convertToStart(id) {\r\n        let prevStart = document.getElementsByClassName(\"start\")[0]\r\n        let newStart = document.getElementById(id)\r\n        prevStart.className = \"default\"\r\n        newStart.className = \"start\"\r\n    }\r\n\r\n    convertToEnd(id) {\r\n        let prevEnd = document.getElementsByClassName(\"end\")[0]\r\n        let newEnd = document.getElementById(id)\r\n        prevEnd.className = \"default\"\r\n        newEnd.className = \"end\"\r\n    }\r\n\r\n    convertToWall(id) {\r\n        let node = document.getElementById(id)\r\n        if (node.className === \"default\" || node.className === \"seen\" || node.className === \"path\") {\r\n            node.className = \"wall\"\r\n        }\r\n    }\r\n\r\n    convertToWeight(id) {\r\n        let node = document.getElementById(id)\r\n        if (node.className === \"default\" || node.className === \"seen\" || node.className === \"path\") {\r\n            node.className = \"weight\"\r\n        }\r\n    }\r\n\r\n    convertToDefault(id) {\r\n        let node = document.getElementById(id)\r\n        if (node.className === \"wall\" || node.className === \"weight\") {\r\n            node.className = \"default\"\r\n        }\r\n    }\r\n\r\n    checkType(x, y) {\r\n        let type = \"default\"\r\n        if (x === parseInt(this.state.width/33/3) && y === parseInt(this.state.height/31/2)) {\r\n            type = \"start\"\r\n        }\r\n        else if (x === parseInt(this.state.width*2/33/3) && y === parseInt(this.state.height/31/2)) {\r\n            type = \"end\"\r\n        }\r\n        return type\r\n    }\r\n\r\n    render() {\r\n        let col = []\r\n        let y = 0;\r\n        while (y < this.state.height/30) {\r\n            let row = []\r\n            let x;\r\n            for (x = 0; x < this.state.width/32; x++) {\r\n                let type = this.checkType(x, y);\r\n                row.push(<Node x={x} y={y} type={type} key={x + \" \" + y}></Node>)\r\n            }\r\n            col.push(<Row debug key={y}>{row.map(e => e)}</Row>)\r\n            y++;\r\n        }\r\n        return (\r\n            <div id=\"grid\" style={{marginLeft: \"15px\"}} onContextMenu={e => e.preventDefault()} onMouseLeave={e => this.resetMouse(e)} onMouseDown={e => this.setMouse(e)} onMouseUp={e => this.setMouse(e)} onMouseOver={e => this.hoverMouse(e)}>\r\n                {col.map(e => e)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Grid;","\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nasync function showPath(start, end, pred) {\r\n    let curr = end;\r\n    let path = []\r\n    while (pred[curr] !== start) {\r\n        path.push(pred[curr])\r\n        curr = pred[curr]\r\n    }\r\n    path.reverse()\r\n    for (let x in path) {\r\n        let node = document.getElementById(path[x]);\r\n        node.className = \"path\"\r\n        await sleep(1)\r\n    }\r\n    \r\n}\r\n\r\nasync function BFS(start, end) {\r\n    let found = false;\r\n    let queue = [start]\r\n    let seen = [start]\r\n    let pred = {}\r\n    while (queue.length > 0 && !found) {\r\n        let n = queue.shift()\r\n        const x = parseInt(n.split(\" \")[0])\r\n        const y = parseInt(n.split(\" \")[1])\r\n        const adjacent = [x.toString() + \" \" + (y - 1).toString(), (x + 1).toString() + \" \" + y.toString(), x.toString() + \" \" + (y + 1).toString(), (x - 1).toString() + \" \" + y.toString()]\r\n        let i;\r\n        for (i in adjacent) {\r\n            if (adjacent[i] === end) { \r\n                pred[adjacent[i]] = n\r\n                found = true\r\n                break\r\n            }\r\n            let node = document.getElementById(adjacent[i])\r\n            if (node !== null) {\r\n                if ((node.className === \"default\" || node.className === \"weight\") && !seen.includes(node.id)) {\r\n                    seen.push(node.id)\r\n                    if (node.className === \"default\") {\r\n                        node.className = \"seen\"\r\n                    }\r\n                    pred[adjacent[i]] = n\r\n                    queue.push(node.id)\r\n                    await sleep(1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (found) {\r\n        showPath(start, end, pred)\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function DFS(start, end) {\r\n    let found = false;\r\n    let stack = [start]\r\n    let seen = [start]\r\n    let pred = {}\r\n    while (stack.length > 0 && !found) {\r\n        let n = stack.pop()\r\n        const x = parseInt(n.split(\" \")[0])\r\n        const y = parseInt(n.split(\" \")[1])\r\n        const adjacent = [x.toString() + \" \" + (y - 1).toString(), (x + 1).toString() + \" \" + y.toString(), x.toString() + \" \" + (y + 1).toString(), (x - 1).toString() + \" \" + y.toString()]\r\n        let i;\r\n        for (i in adjacent) {\r\n            if (adjacent[i] === end) { \r\n                pred[adjacent[i]] = n\r\n                found = true\r\n                break\r\n            }\r\n            let node = document.getElementById(adjacent[i])\r\n            if (node !== null) {\r\n                if ((node.className === \"default\" || node.className === \"weight\") && !seen.includes(node.id)) {\r\n                    seen.push(node.id)\r\n                    if (node.className === \"default\") {\r\n                        node.className = \"seen\"\r\n                    }\r\n                    pred[adjacent[i]] = n\r\n                    stack.push(node.id)\r\n                    await sleep(1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (found) {\r\n        showPath(start, end, pred)\r\n    }\r\n}\r\n\r\nasync function Dijkstra(startId, endId, defWeight, weight) {\r\n    const nodeWeights = {\"default\": parseInt(defWeight),\r\n        \"seen\": parseInt(defWeight),\r\n        \"start\": 0,\r\n        \"end\": parseInt(defWeight),\r\n        \"weight\": parseInt(weight),\r\n    }\r\n    let seen = []\r\n    let pred = {}\r\n    let distance = {}\r\n    let found = false;\r\n\r\n    let x;\r\n    let defNodes = document.querySelectorAll(\".default\");\r\n    for (x = 0; x < defNodes.length; x++) {\r\n        distance[defNodes[x].id] = Number.MAX_VALUE\r\n    }\r\n    let weightNodes = document.querySelectorAll(\".weight\");\r\n    for (x = 0; x < weightNodes.length; x++) {\r\n        distance[weightNodes[x].id] = Number.MAX_VALUE\r\n    }\r\n    let seenNodes = document.querySelectorAll(\".seen\");\r\n    for (x = 0; x < seenNodes.length; x++) {\r\n        distance[seenNodes[x].id] = Number.MAX_VALUE\r\n    }\r\n    let path = document.querySelectorAll(\".path\");\r\n    for (x = 0; x < path.length; x++) {\r\n        distance[path[x].id] = Number.MAX_VALUE\r\n    }\r\n\r\n    distance[startId] = 0\r\n    distance[endId] = Number.MAX_VALUE\r\n    let node = getShortestNode(distance, seen)\r\n    while (node) {\r\n        const x = parseInt(node.split(\" \")[0])\r\n        const y = parseInt(node.split(\" \")[1])\r\n        const adjacent = [x.toString() + \" \" + (y - 1).toString(), (x + 1).toString() + \" \" + y.toString(), x.toString() + \" \" + (y + 1).toString(), (x - 1).toString() + \" \" + y.toString()]\r\n        for (let child in adjacent) {\r\n            let childNode = document.getElementById(adjacent[child])\r\n            if (childNode === null || childNode.id === startId) {continue}\r\n            if (adjacent[child] === endId) {found = true}\r\n            let temp = distance[node] + nodeWeights[childNode.className]\r\n            if (distance[childNode.id] > temp) {\r\n                distance[childNode.id] = temp\r\n                pred[childNode.id] = node\r\n            }\r\n        }\r\n        let currNode = document.getElementById(node)\r\n        if (currNode.className === \"default\") {\r\n            currNode.className = \"seen\"\r\n        }\r\n        seen.push(node)\r\n        await sleep(1)\r\n        node = getShortestNode(distance, seen)\r\n    }\r\n    if (found) {\r\n        showPath(startId, endId, pred)\r\n    }\r\n}\r\n\r\nfunction getShortestNode(distance, seen) {\r\n    let shortest = null\r\n    for (let node in distance) {\r\n        let curr = shortest === null || distance[node] < distance[shortest]\r\n        if (curr && !seen.includes(node)) {\r\n            shortest = node\r\n        }\r\n    }\r\n    return shortest\r\n}\r\n\r\nasync function Astar(startId, endId, defWeight, weight) {\r\n    let open = []\r\n    let closed = []\r\n    let distance = {}\r\n    let fDistance = {}\r\n    let pred = {}\r\n\r\n    const nodeWeights = {\"default\": parseInt(defWeight),\r\n        \"seen\": parseInt(defWeight),\r\n        \"start\": 0,\r\n        \"end\": parseInt(defWeight),\r\n        \"weight\": parseInt(weight),\r\n    }\r\n\r\n    distance[startId] = 0\r\n    fDistance[startId] = 0 + getHDistance(startId, endId, nodeWeights)\r\n    let curr = startId\r\n    while (curr !== endId && curr !== undefined) {\r\n        console.log(curr)\r\n        const x = parseInt(curr.split(\" \")[0])\r\n        const y = parseInt(curr.split(\" \")[1])\r\n        const adjacent = [x.toString() + \" \" + (y - 1).toString(), (x + 1).toString() + \" \" + y.toString(), x.toString() + \" \" + (y + 1).toString(), (x - 1).toString() + \" \" + y.toString()]\r\n        for (let child in adjacent) {\r\n            let childNode = document.getElementById(adjacent[child])\r\n            if (childNode === null || childNode.className === \"wall\") {continue}\r\n            if (!open.includes(adjacent[child]) && !closed.includes(adjacent[child])) {\r\n                open.push(adjacent[child])\r\n            }\r\n            let temp = distance[curr] + nodeWeights[childNode.className]\r\n            if (!(adjacent[child] in distance) || distance[childNode.id] > temp) {\r\n                distance[adjacent[child]] = temp\r\n            }\r\n            let f = distance[adjacent[child]] + getHDistance(adjacent[child], endId, nodeWeights)\r\n            if (!(adjacent[child] in fDistance) || f < fDistance[adjacent[child]]) {\r\n                fDistance[adjacent[child]] = f\r\n                pred[adjacent[child]] = curr\r\n            }\r\n        }\r\n        let currNode = document.getElementById(curr)\r\n        if (currNode.className === \"default\") {\r\n            currNode.className = \"seen\"\r\n        }\r\n        await sleep(1)\r\n        closed.push(curr)\r\n\r\n        let smallest = open[0]\r\n        for (let x in open) {\r\n            if (fDistance[open[x]] < fDistance[smallest]) {\r\n                smallest = open[x]\r\n            }\r\n        }\r\n        const index = open.indexOf(smallest)\r\n        open.splice(index, 1)\r\n\r\n        curr = smallest\r\n    }\r\n    if (curr !== undefined) {\r\n        curr = endId;\r\n        showPath(startId, endId, pred)\r\n    }\r\n}\r\n\r\nfunction getHDistance(start, end, nodeWeights) {\r\n    const startX = parseInt(start.split(\" \")[0])\r\n    const startY = parseInt(start.split(\" \")[1])\r\n    const endX = parseInt(end.split(\" \")[0])\r\n    const endY = parseInt(end.split(\" \")[1])\r\n    let x = Math.abs(startX - endX)\r\n    let y = Math.abs(startY - endY)\r\n    let node = document.getElementById(start)\r\n    return x + y + nodeWeights[node.className]\r\n}\r\n\r\nexport {BFS, DFS, Dijkstra, Astar};","import React, {Component} from \"react\";\r\nimport {Button, Modal, Col} from 'react-bootstrap';\r\nimport \"../styles/HelpModal.css\"\r\n\r\nclass HelpModal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            modalVisible: false\r\n        }\r\n        this.toggleModal = this.toggleModal.bind(this)\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState(prevState => ({modalVisible: !prevState.modalVisible}))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Modal show={this.state.modalVisible} onHide={this.toggleModal} centered size=\"lg\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Help</Modal.Title>\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <div>                            \r\n                            <div className=\"nodeRow\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"node\">\r\n                                        <Col className={\"defaultNode\"} sm={0}>.</Col>\r\n                                    </div>\r\n                                    Default unvisited node\r\n                                </div>\r\n                                \r\n                                <div className=\"row\">\r\n                                    <div className=\"node\">\r\n                                        <Col className={\"startNode\"} sm={0}>.</Col>\r\n                                    </div>\r\n                                    The starting node\r\n                                </div >\r\n                                <div className=\"row\">\r\n                                    <div className=\"node\">\r\n                                        <Col className={\"endNode\"} sm={0}>.</Col>\r\n                                    </div>\r\n                                    The destination node\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"node\">\r\n                                        <Col className={\"pathNode\"} sm={0}>.</Col>\r\n                                    </div>\r\n                                    Path nodes\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"nodeRow\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"node\">\r\n                                        <Col className={\"seenNode\"} sm={0}>.</Col>\r\n                                    </div>\r\n                                    Visited nodes\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"node\">\r\n                                        <Col className={\"wallNode\"} sm={0}>.</Col>\r\n                                    </div>\r\n                                    Wall nodes\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"node\">\r\n                                        <Col className={\"weightNode\"} sm={0}>.</Col>\r\n                                    </div>\r\n                                    Weighted nodes\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <div className=\"helpText\">\r\n                            Use left click to place wall nodes, middle click to place weighted nodes and right click to reset nodes to default.\r\n                        </div>\r\n                    </Modal.Footer>\r\n                    <Modal.Footer>\r\n                        <Button onClick={this.toggleModal}>Close</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                <Button variant=\"info\" className=\"helpButton\" onClick={this.toggleModal}>Help</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HelpModal","import React, {Component} from \"react\";\r\nimport {Button, Form, Navbar, Nav, InputGroup} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport \"../styles/TopBar.css\"\r\nimport {BFS, DFS, Dijkstra, Astar} from './algos/Algorithms.js'\r\nimport HelpModal from './HelpModal.js'\r\n\r\nclass TopBar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            running: true,\r\n        }\r\n        this.startAlgorithm = this.startAlgorithm.bind(this)\r\n    }\r\n    \r\n    resetGrid() {\r\n        let walls = document.querySelectorAll(\".wall\");\r\n        let x;\r\n        for (x = 0; x < walls.length; x++) {\r\n            walls[x].className = \"default\"\r\n        }\r\n        let weight = document.querySelectorAll(\".weight\");\r\n        for (x = 0; x < weight.length; x++) {\r\n            weight[x].className = \"default\"\r\n        }\r\n        let seen = document.querySelectorAll(\".seen\");\r\n        for (x = 0; x < seen.length; x++) {\r\n            seen[x].className = \"default\"\r\n        }\r\n        let path = document.querySelectorAll(\".path\");\r\n        for (x = 0; x < path.length; x++) {\r\n            path[x].className = \"default\"\r\n        }\r\n        let start = document.getElementsByClassName(\"start\")[0]\r\n        start.className = \"default\"\r\n        let end = document.getElementsByClassName(\"end\")[0]\r\n        end.className = \"default\"\r\n        const startX = parseInt(window.innerWidth/33/3)\r\n        const startY = parseInt(window.innerHeight/31/2)\r\n        const startId = startX.toString() + \" \" + startY.toString()\r\n        const endX = parseInt(window.innerWidth*2/33/3)\r\n        const endY = parseInt(window.innerHeight/31/2)\r\n        const endId = endX.toString() + \" \" + endY.toString()\r\n        let newStart = document.getElementById(startId)\r\n        newStart.className = \"start\"\r\n        let newEnd = document.getElementById(endId)\r\n        newEnd.className = \"end\"\r\n    }\r\n\r\n    toggleRunning() {\r\n        let grid = document.getElementById(\"grid\")\r\n        grid.className = !this.state.running\r\n        this.setState(prevState => ({running: !prevState.running}))\r\n    }\r\n\r\n    async startAlgorithm(e) {\r\n        e.preventDefault()\r\n\r\n        this.toggleRunning()\r\n\r\n        let x;\r\n        let seen = document.querySelectorAll(\".seen\");\r\n        for (x = 0; x < seen.length; x++) {\r\n            seen[x].className = \"default\"\r\n        }\r\n        let path = document.querySelectorAll(\".path\");\r\n        for (x = 0; x < path.length; x++) {\r\n            path[x].className = \"default\"\r\n        }\r\n\r\n        let start = document.getElementsByClassName(\"start\")[0].id\r\n        let end = document.getElementsByClassName(\"end\")[0].id\r\n        const defWeight = e.target[1].value\r\n        const weight = e.target[2].value\r\n        switch (e.target[0].value) {\r\n            case(\"Breadth First Search\"):\r\n                await BFS(start, end)\r\n                this.toggleRunning()\r\n                break\r\n            case(\"Depth First Search\"):\r\n                await DFS(start, end)\r\n                this.toggleRunning()\r\n                break\r\n            case(\"Dijkstra's Algorithm\"):\r\n                await Dijkstra(start, end, defWeight, weight)\r\n                this.toggleRunning()\r\n                break\r\n            case(\"A* Algorithm\"):\r\n                await Astar(start, end, defWeight, weight)\r\n                this.toggleRunning()\r\n                break\r\n            default:\r\n                this.toggleRunning()\r\n                break\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\">Pathfinding Algorithms Visualised</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Form className=\"algorithm\" onSubmit={this.startAlgorithm} inline>\r\n                    <Nav className=\"formAlgos\">\r\n                        <Nav.Item>\r\n                            <Form.Group className=\"form\">\r\n                                <Form.Control as=\"select\" >\r\n                                    <option>Breadth First Search</option>\r\n                                    <option>Depth First Search</option>\r\n                                    <option>Dijkstra's Algorithm</option>\r\n                                    <option>A* Algorithm</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"basic-addon1\">Weight of Default Nodes</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <Form.Control as=\"select\" >\r\n                                    <option>1</option>\r\n                                    <option>2</option>\r\n                                    <option>3</option>\r\n                                    <option>4</option>\r\n                                    <option>5</option>\r\n                                    <option>6</option>\r\n                                    <option>7</option>\r\n                                    <option>8</option>\r\n                                    <option>9</option>\r\n                                    <option>10</option>\r\n                                </Form.Control>\r\n                            </InputGroup>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"basic-addon1\">Weight of Weighted Nodes</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <Form.Control as=\"select\" >\r\n                                    <option>1</option>\r\n                                    <option>2</option>\r\n                                    <option>3</option>\r\n                                    <option>4</option>\r\n                                    <option>5</option>\r\n                                    <option>6</option>\r\n                                    <option>7</option>\r\n                                    <option>8</option>\r\n                                    <option>9</option>\r\n                                    <option>10</option>\r\n                                    <option>11</option>\r\n                                    <option>12</option>\r\n                                    <option>13</option>\r\n                                    <option>14</option>\r\n                                    <option>15</option>\r\n                                </Form.Control>\r\n                            </InputGroup>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                    <div className=\"buttons\">\r\n                        <Button type=\"submit\" variant=\"success\" className=\"startButton\" disabled={!this.state.running}>Start</Button>\r\n                        <Button variant=\"warning\" className=\"resetButton\" onClick={this.resetGrid} disabled={!this.state.running}>Reset</Button>\r\n                        <HelpModal></HelpModal>\r\n                    </div>\r\n                </Form>\r\n            </Navbar>        \r\n        )\r\n    }\r\n}\r\n\r\nexport default TopBar","\nimport './styles/App.css';\nimport Grid from \"./components/Grid.js\"\nimport TopBar from \"./components/TopBar.js\"\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TopBar></TopBar>\n            <Grid></Grid>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}